// В JS у строк есть метод substr. В этом задании мы его реализуем самостоятельно. 
// Просьба не использовать этот метод внутри вашей реализации.
// Реализуйте и экспортируйте по умолчанию функцию substr, которая возвращает подстроку из переданной строки. 
// Подстрокой называется любая выбранная часть строки. Например для строки hello можно выделить следующие подстроки: 
// ello, llo, o, el и множество других. Функция принимает на вход три параметра:

// Строка.
// Начальный индекс. Значение по умолчанию: 0.
// Длина подстроки (количество символов). Значение по умолчанию: длина всей строки.

//=============================================
// my solution
//=============================================
const substr = (str, start = 0, finish = str.length) => {
    let result = '';
    if (start < 0) {
      start = 0;
    }
    if (start == 0 && finish >= str.length) {
      return str;
    }
    if (finish == 0 || start > (str.length - 1)) {
      return result;
    }
    if (finish < 0) {
      finish = 1;
    }
    if ((start + finish - 1) > str.length) {
      finish = str.length  - start;
    }
  
    
  for (let i = start; i < finish + start; i++) {
  result += str[i];
  }
  
    return result;
  }
  
  export default substr;
//=============================================
// my solution
//=============================================

//=============================================
// hexlet solution
//=============================================
export default (str, index = 0, substrLength = str.length) => {
    if (index >= str.length) { // если начальный индекс выходит за границу слова справа,
      return ''; // то возвращаем пустую строку
    }
  
    // В учительском решении нормализация сводится к подготовке всего двух переменных:
    // currentIndex и lastIndex — они формируют диапазон,
    // из которого будет складываться итоговая подстрока.
  
    // определяем, где находится первый элемент (его позиция в str)
    // формируемой подстроки
    const currentIndex = index < 0 ? 0 : index;
  
    // определяем, где находится последний элемент (его позиция в str)
    // формируемой подстроки
    let lastIndex = currentIndex + (substrLength - 1);
  
    if (substrLength < 0) { // обрабатываем ситуацию, когда substrLength отрицателен
      lastIndex = currentIndex;
    } else if (lastIndex > str.length - 1) { // если конечный индекс выходит за границу строки,
      lastIndex = str.length - 1; // то считаем, что он равен индексу последнего элемента в str
    }
  
    // генерируем подстроку result,
    // "вырезая" её из исходной строки str
    let result = '';
    for (let i = currentIndex; i <= lastIndex; i += 1) {
      result = `${result}${str[i]}`;
    }
  
    return result;
  };
//=============================================
// hexlet solution
//=============================================
